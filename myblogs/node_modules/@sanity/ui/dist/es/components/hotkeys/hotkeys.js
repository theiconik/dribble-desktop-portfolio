var __defProp = Object.defineProperty;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
import React, {forwardRef} from "react";
import styled from "styled-components";
import {Inline, KBD} from "../../primitives";
const Root = styled.kbd`
  &:not([hidden]) {
    display: block;
  }
  font: inherit;
`;
const Key = styled(KBD)`
  &:not([hidden]) {
    display: block;
  }
`;
const Hotkeys = forwardRef((props, ref) => {
  const _a = props, {keys, padding, radius, size, space = 1} = _a, restProps = __objRest(_a, ["keys", "padding", "radius", "size", "space"]);
  if (!keys || keys.length === 0) {
    return /* @__PURE__ */ React.createElement("span", null);
  }
  return /* @__PURE__ */ React.createElement(Root, __objSpread(__objSpread({
    "data-ui": "Hotkeys"
  }, restProps), {
    ref
  }), /* @__PURE__ */ React.createElement(Inline, {
    as: "span",
    space
  }, keys.map((key, i) => /* @__PURE__ */ React.createElement(Key, {
    fontSize: size,
    key: i,
    padding,
    radius
  }, key))));
});
Hotkeys.displayName = "Hotkeys";
export {
  Hotkeys
};
