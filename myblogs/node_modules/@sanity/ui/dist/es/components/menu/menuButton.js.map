{
  "version": 3,
  "sources": ["../../../../src/components/menu/menuButton.tsx"],
  "sourcesContent": ["import React, {cloneElement, forwardRef, useCallback, useMemo, useState} from 'react'\nimport ReactIs from 'react-is'\nimport {isHTMLElement} from '../../helpers'\nimport {useClickOutside} from '../../hooks'\nimport {Popover, PopoverProps} from '../../primitives'\nimport {ThemeColorSchemeKey} from '../../theme'\nimport {Placement} from '../../types'\n\nexport interface MenuButtonProps {\n  /**\n   * Use `popover={{boundaryElement: ...}}` instead.\n   * @deprecated\n   */\n  boundaryElement?: HTMLElement\n  button: React.ReactElement\n  id: string\n  menu?: React.ReactElement\n  /**\n   * Use `popover={{placement: ...}}` instead.\n   * @deprecated\n   */\n  placement?: Placement\n  popover?: Omit<PopoverProps, 'content' | 'open'>\n  /**\n   * Use `popover={{scheme: ...}}` instead.\n   * @deprecated\n   */\n  popoverScheme?: ThemeColorSchemeKey\n  /**\n   * Use `popover={{radius: ...}}` instead.\n   * @deprecated\n   */\n  popoverRadius?: number | number[]\n  /**\n   * Use `popover={{radius: ...}}` instead.\n   *\n   * Do not use in production.\n   * @beta\n   * @deprecated\n   */\n  portal?: boolean\n  /**\n   * Use `popover={{preventOverflow: ...}}` instead.\n   * @deprecated\n   */\n  preventOverflow?: boolean\n}\n\nexport const MenuButton = forwardRef(function MenuButton(\n  props: MenuButtonProps,\n  ref: React.ForwardedRef<HTMLButtonElement | null>\n) {\n  const {\n    boundaryElement,\n    button: buttonProp,\n    id,\n    menu: menuProp,\n    placement,\n    popoverScheme,\n    portal,\n    popover,\n    popoverRadius,\n    preventOverflow,\n  } = props\n  const [open, setOpen] = useState(false)\n  const [focusLast, setFocusLast] = useState(false)\n  const [buttonElement, setButtonElement] = useState<HTMLButtonElement | null>(null)\n  const [menuElement, setMenuElement] = useState<HTMLDivElement | null>(null)\n\n  const handleButtonClick = useCallback(() => {\n    setOpen((v) => !v)\n    setFocusLast(false)\n  }, [])\n\n  const handleButtonKeyDown = useCallback((event: React.KeyboardEvent<HTMLButtonElement>) => {\n    if (event.key === 'ArrowDown') {\n      event.preventDefault()\n      setOpen(true)\n      setFocusLast(false)\n\n      return\n    }\n\n    if (event.key === 'ArrowUp') {\n      event.preventDefault()\n      setOpen(true)\n      setFocusLast(true)\n\n      return\n    }\n  }, [])\n\n  const handleMenuClickOutside = useCallback(\n    (event: MouseEvent) => {\n      const targetElement = isHTMLElement(event.target) ? event.target.closest('button') : null\n\n      if (targetElement !== buttonElement) {\n        setOpen(false)\n      }\n    },\n    [buttonElement]\n  )\n\n  const handleMenuEscape = useCallback(() => {\n    setOpen(false)\n    if (buttonElement) buttonElement.focus()\n  }, [buttonElement])\n\n  const handleBlur = useCallback(\n    (event: React.FocusEvent<HTMLButtonElement>) => {\n      const target = event.relatedTarget\n\n      if (target === buttonElement) {\n        return\n      }\n\n      if (isHTMLElement(target) && !menuElement?.contains(target)) {\n        setOpen(false)\n      }\n    },\n    [buttonElement, menuElement]\n  )\n\n  const handleItemClick = useCallback(() => {\n    setOpen(false)\n    if (buttonElement) buttonElement.focus()\n  }, [buttonElement])\n\n  useClickOutside(\n    useCallback(() => setOpen(false), []),\n    [buttonElement, menuElement]\n  )\n\n  const menuProps = {\n    'aria-labelledby': id,\n    focusLast,\n    onClickOutside: handleMenuClickOutside,\n    onEscape: handleMenuEscape,\n    onItemClick: handleItemClick,\n    ref: setMenuElement,\n    onBlurCapture: handleBlur,\n  }\n\n  // @todo: check if the `menu` property is a Menu component?\n  const menu = menuProp ? cloneElement(menuProp, menuProps) : null\n\n  const setButtonRef = useCallback(\n    (el: HTMLButtonElement | null) => {\n      if (typeof ref === 'function') {\n        ref(el)\n      } else if (ref) {\n        ref.current = el\n      }\n\n      setButtonElement(el)\n    },\n    [ref]\n  )\n\n  // @todo: check if the `button` property is a Button component?\n  const button = useMemo(\n    () =>\n      ReactIs.isElement(buttonProp)\n        ? cloneElement(buttonProp, {\n            id,\n            onClick: handleButtonClick,\n            onKeyDown: handleButtonKeyDown,\n            'aria-haspopup': true,\n            'aria-expanded': open,\n            ref: setButtonRef,\n            selected: open,\n          })\n        : null,\n    [buttonProp, handleButtonClick, handleButtonKeyDown, id, open, setButtonRef]\n  )\n\n  const popoverProps = useMemo(() => {\n    return {\n      boundaryElement,\n      placement,\n      portal,\n      radius: popoverRadius,\n      overflow: preventOverflow,\n      scheme: popoverScheme,\n      ...(popover || {}),\n    }\n  }, [boundaryElement, placement, popover, popoverRadius, portal, preventOverflow, popoverScheme])\n\n  return (\n    <Popover {...popoverProps} content={menu} data-ui=\"MenuButton\" open={open}>\n      {button || <></>}\n    </Popover>\n  )\n})\n"],
  "mappings": ";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AA4CO,MAAM,aAAa,WAAW,qBACnC,OACA,KACA;AACA,QAAM;AAAA,IACJ;AAAA,IACA,QAAQ;AAAA,IACR;AAAA,IACA,MAAM;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,MACE;AACJ,QAAM,CAAC,MAAM,WAAW,SAAS;AACjC,QAAM,CAAC,WAAW,gBAAgB,SAAS;AAC3C,QAAM,CAAC,eAAe,oBAAoB,SAAmC;AAC7E,QAAM,CAAC,aAAa,kBAAkB,SAAgC;AAEtE,QAAM,oBAAoB,YAAY,MAAM;AAC1C,YAAQ,CAAC,MAAM,CAAC;AAChB,iBAAa;AAAA,KACZ;AAEH,QAAM,sBAAsB,YAAY,CAAC,UAAkD;AACzF,QAAI,MAAM,QAAQ,aAAa;AAC7B,YAAM;AACN,cAAQ;AACR,mBAAa;AAEb;AAAA;AAGF,QAAI,MAAM,QAAQ,WAAW;AAC3B,YAAM;AACN,cAAQ;AACR,mBAAa;AAEb;AAAA;AAAA,KAED;AAEH,QAAM,yBAAyB,YAC7B,CAAC,UAAsB;AACrB,UAAM,gBAAgB,cAAc,MAAM,UAAU,MAAM,OAAO,QAAQ,YAAY;AAErF,QAAI,kBAAkB,eAAe;AACnC,cAAQ;AAAA;AAAA,KAGZ,CAAC;AAGH,QAAM,mBAAmB,YAAY,MAAM;AACzC,YAAQ;AACR,QAAI;AAAe,oBAAc;AAAA,KAChC,CAAC;AAEJ,QAAM,aAAa,YACjB,CAAC,UAA+C;AAC9C,UAAM,SAAS,MAAM;AAErB,QAAI,WAAW,eAAe;AAC5B;AAAA;AAGF,QAAI,cAAc,WAAW,CAAC,4CAAa,SAAS,UAAS;AAC3D,cAAQ;AAAA;AAAA,KAGZ,CAAC,eAAe;AAGlB,QAAM,kBAAkB,YAAY,MAAM;AACxC,YAAQ;AACR,QAAI;AAAe,oBAAc;AAAA,KAChC,CAAC;AAEJ,kBACE,YAAY,MAAM,QAAQ,QAAQ,KAClC,CAAC,eAAe;AAGlB,QAAM,YAAY;AAAA,IAChB,mBAAmB;AAAA,IACnB;AAAA,IACA,gBAAgB;AAAA,IAChB,UAAU;AAAA,IACV,aAAa;AAAA,IACb,KAAK;AAAA,IACL,eAAe;AAAA;AAIjB,QAAM,OAAO,WAAW,aAAa,UAAU,aAAa;AAE5D,QAAM,eAAe,YACnB,CAAC,OAAiC;AAChC,QAAI,OAAO,QAAQ,YAAY;AAC7B,UAAI;AAAA,eACK,KAAK;AACd,UAAI,UAAU;AAAA;AAGhB,qBAAiB;AAAA,KAEnB,CAAC;AAIH,QAAM,SAAS,QACb,MACE,QAAQ,UAAU,cACd,aAAa,YAAY;AAAA,IACvB;AAAA,IACA,SAAS;AAAA,IACT,WAAW;AAAA,IACX,iBAAiB;AAAA,IACjB,iBAAiB;AAAA,IACjB,KAAK;AAAA,IACL,UAAU;AAAA,OAEZ,MACN,CAAC,YAAY,mBAAmB,qBAAqB,IAAI,MAAM;AAGjE,QAAM,eAAe,QAAQ,MAAM;AACjC,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,QAAQ;AAAA,OACJ,WAAW;AAAA,KAEhB,CAAC,iBAAiB,WAAW,SAAS,eAAe,QAAQ,iBAAiB;AAEjF,SACE,oCAAC,SAAD,4BAAa,eAAb;AAAA,IAA2B,SAAS;AAAA,IAAM,WAAQ;AAAA,IAAa;AAAA,MAC5D,UAAU;AAAA;",
  "names": []
}
