var __defProp = Object.defineProperty;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
import React, {forwardRef, useCallback, useEffect, useMemo, useRef, useState} from "react";
import styled from "styled-components";
import {useClickOutside, useGlobalKeyDown} from "../../hooks";
import {Box, Stack} from "../../primitives";
import {useLayer} from "../../utils";
import {getFocusableElements} from "./helpers";
import {MenuContext} from "./menuContext";
const Root = styled(Box)`
  outline: none;
  overflow: auto;
`;
const Menu = forwardRef((props, ref) => {
  const _a = props, {
    children,
    focusLast,
    onClickOutside,
    onEscape,
    onItemClick,
    onItemSelect,
    padding = 1,
    space = 1
  } = _a, restProps = __objRest(_a, [
    "children",
    "focusLast",
    "onClickOutside",
    "onEscape",
    "onItemClick",
    "onItemSelect",
    "padding",
    "space"
  ]);
  const {isTopLayer} = useLayer();
  const [rootElement, setRootElement] = useState(null);
  const itemsRef = useRef([]);
  const [activeIndex, setActiveIndex] = useState(-1);
  const [activeElement, setActiveElement] = useState(null);
  const activeElementRef = useRef(activeElement);
  useEffect(() => {
    if (onItemSelect)
      onItemSelect(activeIndex);
  }, [activeIndex, onItemSelect]);
  useEffect(() => {
    activeElementRef.current = activeElement;
  }, [activeElement]);
  useEffect(() => {
    const rafId = window.requestAnimationFrame(() => {
      if (rootElement) {
        if (activeElementRef.current) {
          activeElementRef.current.focus();
          setActiveIndex(itemsRef.current.indexOf(activeElementRef.current));
          return;
        }
        const element = itemsRef.current[focusLast ? itemsRef.current.length - 1 : 0];
        if (element) {
          element.focus();
          setActiveIndex(itemsRef.current.indexOf(element));
        }
      }
    });
    return () => {
      window.cancelAnimationFrame(rafId);
    };
  }, [focusLast, rootElement]);
  const setRef = useCallback((el) => {
    setRootElement(el);
    if (typeof ref === "function")
      ref(el);
    else if (ref)
      ref.current = el;
  }, [ref]);
  const mount = useCallback((element, selected) => {
    if (!element)
      return () => void 0;
    if (!itemsRef.current.includes(element)) {
      itemsRef.current.push(element);
    }
    if (selected === true) {
      setActiveElement(element);
    }
    return () => {
      const idx = itemsRef.current.push(element);
      if (idx > -1) {
        itemsRef.current.splice(idx, 1);
      }
    };
  }, []);
  const handleKeyDown = useCallback((event) => {
    if (event.key === "ArrowUp") {
      event.preventDefault();
      const focusableElements = getFocusableElements(itemsRef.current);
      const focusableLen = focusableElements.filter(({focusable: focusable2}) => focusable2).length;
      if (focusableLen === 0)
        return;
      const len = focusableElements.length;
      let currentIndex = activeIndex;
      let focusable = false;
      let element = null;
      while (!focusable) {
        currentIndex = (currentIndex - 1 + len) % len;
        element = focusableElements[currentIndex].element;
        focusable = focusableElements[currentIndex].focusable;
      }
      setActiveIndex(currentIndex);
      if (element)
        element.focus();
      return;
    }
    if (event.key === "ArrowDown") {
      event.preventDefault();
      const focusableElements = getFocusableElements(itemsRef.current);
      const focusableLen = focusableElements.filter(({focusable: focusable2}) => focusable2).length;
      if (focusableLen === 0)
        return;
      const len = focusableElements.length;
      let currentIndex = activeIndex;
      let focusable = false;
      let element = null;
      while (!focusable) {
        currentIndex = (currentIndex + 1) % len;
        element = focusableElements[currentIndex].element;
        focusable = focusableElements[currentIndex].focusable;
      }
      setActiveIndex(currentIndex);
      if (element)
        element.focus();
      return;
    }
  }, [activeIndex]);
  const handleItemMouseEnter = useCallback((event) => {
    const element = event.currentTarget;
    setActiveIndex(itemsRef.current.indexOf(element));
    element.focus();
  }, []);
  const handleItemMouseLeave = useCallback(() => {
    setActiveIndex(-1);
    rootElement == null ? void 0 : rootElement.focus();
  }, [rootElement]);
  useClickOutside(useCallback((event) => isTopLayer && onClickOutside && onClickOutside(event), [
    isTopLayer,
    onClickOutside
  ]), [rootElement]);
  useGlobalKeyDown(useCallback((event) => {
    if (!isTopLayer)
      return;
    if (event.key === "Escape") {
      event.stopPropagation();
      if (onEscape)
        onEscape();
    }
  }, [isTopLayer, onEscape]));
  const value = useMemo(() => ({
    version: 0,
    activeElement,
    activeIndex,
    mount,
    onMouseEnter: handleItemMouseEnter,
    onMouseLeave: handleItemMouseLeave,
    onItemClick
  }), [activeElement, activeIndex, mount, handleItemMouseEnter, handleItemMouseLeave, onItemClick]);
  return /* @__PURE__ */ React.createElement(MenuContext.Provider, {
    value
  }, /* @__PURE__ */ React.createElement(Root, __objSpread(__objSpread({
    "data-ui": "Menu"
  }, restProps), {
    onKeyDown: handleKeyDown,
    padding,
    ref: setRef,
    role: "menu",
    tabIndex: -1
  }), /* @__PURE__ */ React.createElement(Stack, {
    space
  }, children)));
});
Menu.displayName = "Menu";
export {
  Menu
};
