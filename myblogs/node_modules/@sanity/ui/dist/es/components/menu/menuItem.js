var __defProp = Object.defineProperty;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
import React, {
  createElement,
  forwardRef,
  isValidElement,
  useCallback,
  useEffect,
  useRef
} from "react";
import {isValidElementType} from "react-is";
import {useForwardedRef} from "../../hooks";
import {Box, Card, Flex, Text} from "../../primitives";
import {useMenu} from "./useMenu";
const MenuItem = forwardRef((props, forwardedRef) => {
  const _a = props, {
    children,
    disabled,
    fontSize = 2,
    icon,
    iconRight,
    onClick,
    padding = 3,
    paddingX,
    paddingY,
    paddingTop,
    paddingRight,
    paddingBottom,
    paddingLeft,
    radius = 2,
    selected,
    space = 3,
    text
  } = _a, restProps = __objRest(_a, [
    "children",
    "disabled",
    "fontSize",
    "icon",
    "iconRight",
    "onClick",
    "padding",
    "paddingX",
    "paddingY",
    "paddingTop",
    "paddingRight",
    "paddingBottom",
    "paddingLeft",
    "radius",
    "selected",
    "space",
    "text"
  ]);
  const {mount, onItemClick, onMouseEnter, onMouseLeave} = useMenu();
  const rootRef = useRef(null);
  useEffect(() => mount(rootRef.current, selected), [mount, selected]);
  const ref = useForwardedRef(forwardedRef);
  const handleClick = useCallback((event) => {
    if (disabled)
      return;
    if (onClick)
      onClick(event);
    if (onItemClick)
      onItemClick();
  }, [disabled, onClick, onItemClick]);
  const paddingProps = {
    padding,
    paddingX,
    paddingY,
    paddingTop,
    paddingRight,
    paddingBottom,
    paddingLeft
  };
  const setRef = useCallback((el) => {
    ref.current = el;
    rootRef.current = el;
  }, [ref]);
  return /* @__PURE__ */ React.createElement(Card, __objSpread(__objSpread({
    as: "button",
    "data-ui": "MenuItem"
  }, restProps), {
    disabled,
    onClick: handleClick,
    onMouseEnter,
    onMouseLeave,
    radius,
    ref: setRef,
    role: "menuitem",
    tabIndex: -1,
    type: "button"
  }), (icon || text || iconRight) && /* @__PURE__ */ React.createElement(Box, __objSpread({
    as: "span"
  }, paddingProps), /* @__PURE__ */ React.createElement(Flex, {
    as: "span"
  }, icon && /* @__PURE__ */ React.createElement(Text, {
    size: fontSize
  }, isValidElement(icon) && icon, isValidElementType(icon) && createElement(icon)), text && /* @__PURE__ */ React.createElement(Box, {
    flex: 1,
    marginLeft: icon ? space : void 0,
    marginRight: iconRight ? space : void 0
  }, /* @__PURE__ */ React.createElement(Text, {
    size: fontSize
  }, text)), iconRight && /* @__PURE__ */ React.createElement(Text, {
    size: fontSize
  }, isValidElement(iconRight) && iconRight, isValidElementType(iconRight) && createElement(iconRight)))), children);
});
MenuItem.displayName = "MenuItem";
export {
  MenuItem
};
