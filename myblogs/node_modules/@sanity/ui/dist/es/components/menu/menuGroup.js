import {ChevronRightIcon} from "@sanity/icons";
import React, {useEffect, useRef, useState} from "react";
import styled, {css} from "styled-components";
import {Box, Popover, Text} from "../../primitives";
import {Menu} from "./menu";
import {useMenu} from "./useMenu";
const Root = styled.button((props) => {
  const {theme} = props;
  const tone = theme.sanity.color.card;
  return css`
    -webkit-font-smoothing: inherit;
    appearance: none;
    font: inherit;
    border: 0;
    border-radius: 0;
    background: none;
    color: inherit;
    text-align: left;
    margin: 0;
    padding: 0;
    outline: none;
    background-color: var(--card-bg-color);
    color: var(--card-fg-color);

    &:not(:disabled):focus {
      --card-bg-color: ${tone.selected.bg} !important;
      --card-fg-color: ${tone.selected.fg} !important;
    }

    &:not(:disabled):active {
      --card-bg-color: ${tone.pressed.bg};
      --card-fg-color: ${tone.pressed.fg};
    }

    &:disabled {
      --card-bg-color: ${tone.disabled.bg};
      --card-fg-color: ${tone.disabled.fg};
    }
  `;
});
const TextContainer = styled.span`
  &:not([hidden]) {
    display: flex;
  }

  & > div:first-child {
    flex: 1;
    min-width: 0;
  }
`;
function MenuGroup({children, title}) {
  const [open, setOpen] = useState(false);
  const {mount, onItemClick, onMouseEnter, onMouseLeave} = useMenu();
  const rootRef = useRef(null);
  const mouseLeaveTimeoutRef = useRef(null);
  useEffect(() => mount(rootRef.current), [mount]);
  const handleMouseEnter = (event) => {
    if (mouseLeaveTimeoutRef.current) {
      clearTimeout(mouseLeaveTimeoutRef.current);
    }
    onMouseEnter(event);
    setOpen(true);
  };
  const handleMouseLeave = (event) => {
    onMouseLeave(event);
    mouseLeaveTimeoutRef.current = setTimeout(() => {
      setOpen(false);
    }, 5e3);
  };
  const handleMenuMouseEnter = () => {
    if (mouseLeaveTimeoutRef.current !== null) {
      clearTimeout(mouseLeaveTimeoutRef.current);
      mouseLeaveTimeoutRef.current = null;
    }
  };
  const handleMenuMouseLeave = () => {
    mouseLeaveTimeoutRef.current = setTimeout(() => {
      setOpen(false);
    }, 5e3);
  };
  useEffect(() => {
    return () => {
      if (mouseLeaveTimeoutRef.current !== null) {
        clearTimeout(mouseLeaveTimeoutRef.current);
        mouseLeaveTimeoutRef.current = null;
      }
    };
  }, []);
  const content = /* @__PURE__ */ React.createElement(Menu, {
    onMouseEnter: handleMenuMouseEnter,
    onMouseLeave: handleMenuMouseLeave
  }, children);
  return /* @__PURE__ */ React.createElement(Popover, {
    content,
    "data-ui": "MenuGroup",
    open,
    placement: "right"
  }, /* @__PURE__ */ React.createElement(Root, {
    "data-ui": "MenuGroup",
    onClick: onItemClick,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave,
    ref: rootRef
  }, /* @__PURE__ */ React.createElement(Box, {
    padding: 3
  }, /* @__PURE__ */ React.createElement(TextContainer, null, /* @__PURE__ */ React.createElement(Text, null, title), /* @__PURE__ */ React.createElement(Text, null, /* @__PURE__ */ React.createElement(ChevronRightIcon, null))))));
}
export {
  MenuGroup
};
