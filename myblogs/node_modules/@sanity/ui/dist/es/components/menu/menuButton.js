var __defProp = Object.defineProperty;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __objSpread = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
import React, {cloneElement, forwardRef, useCallback, useMemo, useState} from "react";
import ReactIs from "react-is";
import {isHTMLElement} from "../../helpers";
import {useClickOutside} from "../../hooks";
import {Popover} from "../../primitives";
const MenuButton = forwardRef(function MenuButton2(props, ref) {
  const {
    boundaryElement,
    button: buttonProp,
    id,
    menu: menuProp,
    placement,
    popoverScheme,
    portal,
    popover,
    popoverRadius,
    preventOverflow
  } = props;
  const [open, setOpen] = useState(false);
  const [focusLast, setFocusLast] = useState(false);
  const [buttonElement, setButtonElement] = useState(null);
  const [menuElement, setMenuElement] = useState(null);
  const handleButtonClick = useCallback(() => {
    setOpen((v) => !v);
    setFocusLast(false);
  }, []);
  const handleButtonKeyDown = useCallback((event) => {
    if (event.key === "ArrowDown") {
      event.preventDefault();
      setOpen(true);
      setFocusLast(false);
      return;
    }
    if (event.key === "ArrowUp") {
      event.preventDefault();
      setOpen(true);
      setFocusLast(true);
      return;
    }
  }, []);
  const handleMenuClickOutside = useCallback((event) => {
    const targetElement = isHTMLElement(event.target) ? event.target.closest("button") : null;
    if (targetElement !== buttonElement) {
      setOpen(false);
    }
  }, [buttonElement]);
  const handleMenuEscape = useCallback(() => {
    setOpen(false);
    if (buttonElement)
      buttonElement.focus();
  }, [buttonElement]);
  const handleBlur = useCallback((event) => {
    const target = event.relatedTarget;
    if (target === buttonElement) {
      return;
    }
    if (isHTMLElement(target) && !(menuElement == null ? void 0 : menuElement.contains(target))) {
      setOpen(false);
    }
  }, [buttonElement, menuElement]);
  const handleItemClick = useCallback(() => {
    setOpen(false);
    if (buttonElement)
      buttonElement.focus();
  }, [buttonElement]);
  useClickOutside(useCallback(() => setOpen(false), []), [buttonElement, menuElement]);
  const menuProps = {
    "aria-labelledby": id,
    focusLast,
    onClickOutside: handleMenuClickOutside,
    onEscape: handleMenuEscape,
    onItemClick: handleItemClick,
    ref: setMenuElement,
    onBlurCapture: handleBlur
  };
  const menu = menuProp ? cloneElement(menuProp, menuProps) : null;
  const setButtonRef = useCallback((el) => {
    if (typeof ref === "function") {
      ref(el);
    } else if (ref) {
      ref.current = el;
    }
    setButtonElement(el);
  }, [ref]);
  const button = useMemo(() => ReactIs.isElement(buttonProp) ? cloneElement(buttonProp, {
    id,
    onClick: handleButtonClick,
    onKeyDown: handleButtonKeyDown,
    "aria-haspopup": true,
    "aria-expanded": open,
    ref: setButtonRef,
    selected: open
  }) : null, [buttonProp, handleButtonClick, handleButtonKeyDown, id, open, setButtonRef]);
  const popoverProps = useMemo(() => {
    return __objSpread({
      boundaryElement,
      placement,
      portal,
      radius: popoverRadius,
      overflow: preventOverflow,
      scheme: popoverScheme
    }, popover || {});
  }, [boundaryElement, placement, popover, popoverRadius, portal, preventOverflow, popoverScheme]);
  return /* @__PURE__ */ React.createElement(Popover, __objSpread(__objSpread({}, popoverProps), {
    content: menu,
    "data-ui": "MenuButton",
    open
  }), button || /* @__PURE__ */ React.createElement(React.Fragment, null));
});
export {
  MenuButton
};
