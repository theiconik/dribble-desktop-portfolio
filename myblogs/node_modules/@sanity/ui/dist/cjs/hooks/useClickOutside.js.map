{
  "version": 3,
  "sources": ["../../../src/hooks/useClickOutside.ts"],
  "sourcesContent": ["import {useEffect, useState} from 'react'\nimport {EMPTY_ARRAY} from '../constants'\n\ntype ClickOutsideListener = (event: MouseEvent) => void\n\nexport function useClickOutside(\n  listener: ClickOutsideListener,\n  elementsArg: Array<HTMLElement | null> = EMPTY_ARRAY,\n  boundaryElement?: HTMLElement | null\n) {\n  const [element, setElement] = useState<HTMLElement | null>(null)\n  const elements = [element, ...elementsArg]\n\n  useEffect(() => {\n    if (!listener) return undefined\n\n    const handleWindowMouseDown = (evt: MouseEvent) => {\n      const target = evt.target\n\n      if (!target) {\n        return\n      }\n\n      if (boundaryElement && !boundaryElement.contains(target as Node)) {\n        return\n      }\n\n      let clickInside = false\n\n      for (const el of elements) {\n        if (el && el.contains(target as Node)) {\n          clickInside = true\n        }\n      }\n\n      if (!clickInside) {\n        listener(evt)\n      }\n    }\n\n    window.addEventListener('mousedown', handleWindowMouseDown)\n\n    return () => {\n      window.removeEventListener('mousedown', handleWindowMouseDown)\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [boundaryElement, listener, ...elements])\n\n  return setElement\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkC;AAClC,uBAA0B;AAInB,yBACL,UACA,cAAyC,8BACzC,iBACA;AACA,QAAM,CAAC,SAAS,cAAc,2BAA6B;AAC3D,QAAM,WAAW,CAAC,SAAS,GAAG;AAE9B,8BAAU,MAAM;AACd,QAAI,CAAC;AAAU,aAAO;AAEtB,UAAM,wBAAwB,CAAC,QAAoB;AACjD,YAAM,SAAS,IAAI;AAEnB,UAAI,CAAC,QAAQ;AACX;AAAA;AAGF,UAAI,mBAAmB,CAAC,gBAAgB,SAAS,SAAiB;AAChE;AAAA;AAGF,UAAI,cAAc;AAElB,iBAAW,MAAM,UAAU;AACzB,YAAI,MAAM,GAAG,SAAS,SAAiB;AACrC,wBAAc;AAAA;AAAA;AAIlB,UAAI,CAAC,aAAa;AAChB,iBAAS;AAAA;AAAA;AAIb,WAAO,iBAAiB,aAAa;AAErC,WAAO,MAAM;AACX,aAAO,oBAAoB,aAAa;AAAA;AAAA,KAIzC,CAAC,iBAAiB,UAAU,GAAG;AAElC,SAAO;AAAA;",
  "names": []
}
